
==================================================================================================================
 ****************************      COMMANDS    *******************************************************************
==================================================================================================================


TO check list of pods
# kubectl get po

to check nodes 
# kubectl get nodes


To create deployment 
# kubectl create -f deployment.yml
    >>>>>Note - after creation file madhe jar apan changes kele then use below apply command 
    # Kubectl apply -f deployment.yml


To view list of deployments 
# kubectl get deploy


=========
service :
=========

to view list of services
# kubectl get svc


to create NodePort service
# kubectl create service nodeport <name-of-service> --tcp=<port-of-service>:<port-of-container>
 
    >> ex- kubectl create service nodeport nginx --tcp=80:80



To create clusterIp
# kubectl create service clusterip <name-of-service> --tcp=<port-of-service>:<port-of-container>

     >> ex- kubectl create service clusterip nginx --tcp=80:80
     


=========
Ingress :
=========

to deploy ingress rules
# kubectl create -f <yml-file-of-ingress>

to view list of ingress rules
# kubectl get ing


==============
other commands
==============

How to remove and add replica 
    Method - 1
    # Kubectl scale deploy <deployment-name> â€“ -  replicas <no of pod >
    Ex -  Kubectl scale deploy pm -- replicas 2

    Method -2
    Edit deployent.yml - 
    edit  replica - no pod you want



To login inside the pod 
# kubectl exec -it < name of pod > bash


to delete pod
# kubectl delete pods <pod-name>


=========================================================================================================================
 ****************************      YAML FILES     ***********************************************************************
=========================================================================================================================


***************************** POD *************************

kind: Pod
apiVersion: v1
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Prashant; sleep 5 ; done"]



*************** EXAMPLE OF LABELS *********************


kind: Pod
apiVersion: v1
metadata:
  name: delhipod
  labels:                                                   
    env: development
    class: pods
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-prashant; sleep 5 ; done"]
         
   

************************* NODE SELECTOR EXAMPLE ***************************

kind: Pod
apiVersion: v1
metadata:
  name: nodelabels
  labels:
    env: development
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Prashant; sleep 5 ; done"]
    nodeSelector:                                         
       hardware: t2-medium
       

         command: ["/bin/bash", "-c", "while true; do echo Hello-Prashant; sleep 5 ; done"]

       
   
*****************************************************************************************************
EXAMPLE OF REPLICATION CONTROLLER

kind: ReplicationController               
apiVersion: v1
metadata:
  name: myreplica
spec:
  replicas: 2            
  selector:        
    myname: Prashant                             
  template:                
    metadata:
      name: testpod6
      labels:            
        myname: Prashant
    spec:
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Prashant; sleep 5 ; done"]


****************************************************************************************************************
EXAMPLE OF REPLICA SET


kind: ReplicaSet                                    
apiVersion: apps/v1                            
metadata:
  name: myrs
spec:
  replicas: 2  
  selector:                  
    matchExpressions:                             # these must match the labels
      - {key: myname, operator: In, values: [Bhupinder, Bupinder, Bhopendra]}
      - {key: env, operator: NotIn, values: [production]}
  template:      
    metadata:
      name: testpod7
      labels:              
        myname: Bhupinder
    spec:
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Technical-Guftgu; sleep 5 ; done"]
         
*************************** DEPLOYMENT **************************************

kind: Deployment
apiVersion: apps/v1
metadata:
   name: mydeployments
spec:
   replicas: 2
   selector:     
    matchLabels:
     name: deployment
   template:
     metadata:
       name: testpod
       labels:
         name: deployment
     spec:
      containers:
        - name: c00
          image: ubuntu
          command: ["/bin/bash", "-c", "while true; do echo Technical-Guftgu; sleep 5; done"]

*********************************** SERVICE **********************************************************
       
kind: Service                             # Defines to create Service type Object
apiVersion: v1
metadata:
  name: demoservice
spec:
  ports:
    - port: 80                               # Containers port exposed
      targetPort: 80                     # Pods port
  selector:
    name: deployment                    # Apply this service to any pods which has the specific label
  type: ClusterIP                       # Specifies the service type i.e ClusterIP or NodePort


**********************************************************************************************************************
Ingress rule :-


metadata:
  name: sample-ingress-rule
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /nginx
            backend:
              serviceName: nginx
              servicePort: 80
          - path: /apache
            backend:
              serviceName: httpd
              servicePort: 80
 
       
       
  *********************************************************************************************************     
       
   
