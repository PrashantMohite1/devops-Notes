# steps to create personal access token :- 
     - click on circle which is at right top corner --> setting --> developer setting --> personal access token --> 
     -  --> select tokens (classic) --> select generate new tokens classic --> asign permissions to it --> done

very imp note - 1st thing to do before start working on git - gitHub
     - 1st add remote repo to directory 
     - then clone the repo ---> then we get github repos folder --> 
     - now start creating files , commit , pushing.

----------------------------------------------------- COMMANDS  -------------------------------------------------------------------------------------------------------

Initiate a git repository
# git init

Check status of the repo 
# git status

Add files to stating area
# git add

Add files to repository
# git commit -m "<Commit_message>"

Add remote repo to local
# git remote add origin <repo_url>

Configure author details
# git config --global user.email "you@example.com"
# git config --global user.name "Your Name"

Check remote repo linked to local
# git remote -v

Push the changes to the github-repo
# git push origin <branch_name>

to push all files at once 
# git push origin --all

Download a remote repo to local
# git clone <repo_url>

Pull the latest code to local
# git pull <repo_url>

>> Git clone and pull will do the same thing, clone works anywhere but git pull works only in a git initialized repo.

Create branch 
# git branch <name_of_branch>

to delete a branch in git
# git branch -D <name_of_branch>

To delete branches in github
# git push origin -d master

Switch to a branch
# git checkout <name_of_branch>

Creat and checkout to the new branch
# git checkout -b <name_of_branch>

Check the commit logs
# git log

>> to view in a graphical format
# git log --graph --oneline

To save your work in between switching branches and not commiting the changes to repo
# git stash

>> want to save untracked files also
# git stash -u 

Resume your work back after stash
# git stash pop

Revert any commit
# git revert <commit_id>

Find the difference between two commits
# git diff <Commit_id> <commit_id>

Merge branches - apply changes from one branch to another, history doesnot change
# git merge

Rebase local branch - alternative to git merge, history changes
# git rebase


=============================================================================================
>> Merge

step1 - master file - m1
step2 - test        - t1 t2
step3 - master -      m2 m3

switch to test

git merge master - m1 t1 t2 m2 m3


>> rebase

step1 - master file - m1
step2 - test        - t1 t2
step3 - master -      m2 m3

switch to test

git rebase master - m1 m2 m3 t1 t2
Footer
Â© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
